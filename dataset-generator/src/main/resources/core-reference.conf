crossdata {

  storage {
    persistence = "parquet"
    persistence = ${?CROSSDATA_STORAGE_PERSISTENCE}
    path = "/tmp"
    path = ${?CROSSDATA_STORAGE_PATH}

    stratioSecurity = false
    stratioSecurity = ${?CROSSDATA_STORAGE_STRATIO_SECURITY}

    stratioSecurityMode = "tls"
    stratioSecurityMode = ${?CROSSDATA_STORAGE_STRATIO_SECURITY_MODE}
  }

  catalog {

    #class = "org.apache.spark.sql.crossdata.catalyst.catalog.persistent.governable.GovernableExternalCatalog"
    class = "org.apache.spark.sql.crossdata.catalyst.catalog.persistent.zookeeper.ZookeeperCatalog"
    class = ${?CROSSDATA_CORE_CATALOG_CLASS}

    prefix = "crossdataCluster"
    prefix = ${?CROSSDATA_CORE_CATALOG_PREFIX}

    refresh-tables = false
    refresh-tables = ${?CROSSDATA_CORE_CATALOG_REFRESH_TABLES}

    refresh-time = 10m
    refresh-time = ${?CROSSDATA_CORE_CATALOG_REFRESH_TIME}

    cache-enabled = false
    cache-enabled = ${?CROSSDATA_CORE_CATALOG_CACHE}

    cache-ttl = 60
    cache-ttl = ${?CROSSDATA_CORE_CATALOG_CACHETTL}

    cache-full = false
    cache-full = ${?CROSSDATA_CORE_CATALOG_CACHEFULL}

    hash-hidden-columns = false
    hash-hidden-columns = ${?CROSSDATA_CORE_CATALOG_HASH_HIDDEN_COLUMNS}

    hash-signature = ${?CROSSDATA_CORE_CATALOG_HASH_SIGNATURE}

    ####### Zookeeper Catalog Configuration ###########
    zookeeper {
      connectionString = "localhost:2181"
      connectionString = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_CONNECTIONSTRING}

      connectionTimeout = 15s
      connectionTimeout = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_CONNECTIONTIMEOUT}

      sessionTimeout = 60s
      sessionTimeout = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_SESSIONTIMEOUT}

      retryAttempts = 5
      retryAttempts = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_RETRYATTEMPTS}

      retryInterval = 10s
      retryInterval = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_RETRYINTERVAL}

      compatibilityWithStratioSecurityMode = false
      compatibilityWithStratioSecurityMode = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_COMPATIBILITY_WITH_SECURITY_MODE}

      cache = false
      cache = ${?CROSSDATA_CORE_CATALOG_ZOOKEEPER_CACHE}
    }

    ####### Governable Catalog Configuration ###########
    postgres {
      url = "jdbc:postgresql://localhost:5432"
      url = ${?CROSSDATA_CORE_CATALOG_POSTGRES_URL}

      user = ${?CROSSDATA_CORE_CATALOG_POSTGRES_USER}

      password = ${?CROSSDATA_CORE_CATALOG_POSTGRES_PWD}

      params = ${?CROSSDATA_CORE_CATALOG_POSTGRES_PARAMS}

      stratioSecurity = false
      stratioSecurity = ${?CROSSDATA_CORE_CATALOG_POSTGRES_STRATIOSECURITY}

      stratioSecurityMode = "tls"
      stratioSecurityMode = ${?CROSSDATA_CORE_CATALOG_POSTGRES_STRATIOSECURITYMODE}

      timeout = 10s
      timeout = ${?CROSSDATA_CORE_CATALOG_POSTGRES_TIMEOUT}
    }

    stratio-governance {
      url = "http://localhost:10000/api/v1"
      url = ${?CROSSDATA_CORE_CATALOG_STRATIO_GOVERNANCE_URL}

      timeout = 10s
      timeout = ${?CROSSDATA_CORE_CATALOG_STRATIO_GOVERNANCE_TIMEOUT}
    }

    governance-api-request {
      url = "http://localhost:10000/api/v1"
      url = ${?CROSSDATA_GOVERNANCE_URI}
      page-size = ${?CROSSDATA_GOVERNANCE_PAGE_SIZE}
      parameter {
        name.key = "metadataPathLike"
        name.key = ${?CROSSDATA_GOVERNANCE_PARAM_COLLECTION_KEY}
        resource {
          key = "type"
          key = ${?CROSSDATA_GOVERNANCE_PARAM_RESOURCE_KEY}
          value.crossdata = "XD"
          value.crossdata = ${?CROSSDATA_GOVERNANCE_PARAM_RESOURCE_VALUE_CROSSDATA}
        }
        element-type {
          key = "subtype"
          key = ${?CROSSDATA_GOVERNANCE_PARAM_TYPE_KEY}
          value {
            table = "RESOURCE"
            table = ${?CROSSDATA_GOVERNANCE_PARAM_TYPE_VALUE_TABLE}
            database = "PATH"
            database = ${?CROSSDATA_GOVERNANCE_PARAM_TYPE_VALUE_DATABASE}
            datastore = "DS"
            datastore = ${?CROSSDATA_GOVERNANCE_PARAM_TYPE_VALUE_DATASTORE}
          }
        }
        additional = ""
        additional = ${?CROSSDATA_GOVERNANCE_ADDITIONAL_PARAMETERS}
      }
      ssl {
        truststore-path = ${?CROSSDATA_SERVER_AKKA_HTTP_SSL_TRUSTSTORE}
        truststore-password = ${?CROSSDATA_SERVER_AKKA_HTTP_SSL_TRUSTSTORE_PASSWORD}
        keystore-path = ${?CROSSDATA_SERVER_AKKA_HTTP_SSL_KEYSTORE}
        keystore-password = ${?CROSSDATA_SERVER_AKKA_HTTP_SSL_KEYSTORE_PASSWORD}
      }
      tenant-id = "NONE"
      tenant-id = ${?CROSSDATA_GOVERNANCE_TENANT_ID}
      user-session = "crossdata-1"
      user-session = ${?TENANT_NAME}
    }
    default-governed-collections = ""
    default-governed-collections = ${?CROSSDATA_DEFAULT_GOVERNED_COLLECTIONS}
  }

  security {

    enable-manager = false
    enable-manager = ${?CROSSDATA_SECURITY_MANAGER_ENABLED}

    fine-grained = ${?CROSSDATA_FINE_GRAINED_SECURITY_ENABLED}

    collection-based = ${?CROSSDATA_SERVER_COLLECTION_BASED_AUTHORIZATION}

    manager {

      class = ${?CROSSDATA_SECURITY_MANAGER_CLASS}

    }

  }

  sql {
    enable-native-queries = true
    enable-native-queries = ${?CROSSDATA_SQL_NATIVE_QUERIES_ENABLED}

    enable-native-fallback-to-spark = true
    enable-native-fallback-to-spark = ${?CROSSDATA_SQL_NATIVE_QUERIES_FALLBACK_TO_SPARK_ENABLED}
  }

  enable-session-cache = ${?CROSSDATA_SESSION_CACHE_ENABLED}

  performance-logging = false
  performance-logging = ${?CROSSDATA_PERFORMANCE_TESTING_ENABLED}

}

################################
#                              #
#      Spark config options    #
#                              #
################################
spark {
  
  app.name = "CrossdataServer"
  app.name = ${?CROSSDATA_SERVER_CONFIG_SPARK_APP_NAME}
  master = "local[*]"
  master = ${?CROSSDATA_SERVER_CONFIG_SPARK_MASTER}

  #jars = "/opt/sds/crossdata/lib/crossdata-server_${scala.binary.version}-${project.version}-jar-with-dependencies.jar"
  jars = ${?CROSSDATA_SERVER_CONFIG_SPARK_JARS}
  driver.maxResultSize = 1G
  driver.maxResultSize = ${?CROSSDATA_SERVER_CONFIG_SPARK_DRIVER_MAXRESULTSIZE}
  scheduler.mode = "FAIR"
  scheduler.mode = ${?CROSSDATA_SERVER_CONFIG_SPARK_SCHEDULER_MODE}
  scheduler.pool = ${?CROSSDATA_SERVER_CONFIG_SPARK_SCHEDULER_POOL}
  scheduler.allocation.file = ${?CROSSDATA_SERVER_CONFIG_SPARK_SCHEDULER_ALLOCATION_FILE}

  #local.dir = ""
  local.dir  = ${?CROSSDATA_SERVER_CONFIG_SPARK_LOCAL_DIR}

  #kryo.referenceTracking=false
  #kryo.registrationRequired=false #set to false when working with external datasources #TODO REENABLE KRYO
  #serializer="org.apache.spark.serializer.KryoSerializer"
  #kryo.registrator="com.stratio.crossdata.kryo.CrossdataRegistrator"
  #kryoserializer.buffer.max=256m
  #kryoserializer.buffer.max=${?CROSSDATA_SERVER_CONFIG_SPARK_KRYOSERIALIZER_BUFFER_MAX}

  #kryo.classesToRegister=

  sql.caseSensitive = true
  sql.caseSensitive = ${?CROSSDATA_SERVER_CONFIG_SPARK_SQL_CASESENSITIVE}

  sql.tungsten.enabled=true
  sql.tungsten.enabled=${?CROSSDATA_SERVER_CONFIG_SPARK_SQL_TUNSGTEN_ENABLED}
  sql.shuffle.partitions=100
  sql.shuffle.partitions=${?CROSSDATA_SERVER_CONFIG_SPARK_SQL_SHUFFLE_PARTITIONS}
  sql.autoBroadcastJoinThreshold=10485760
  sql.autoBroadcastJoinThreshold=${?CROSSDATA_SERVER_CONFIG_SPARK_SQL_AUTOBROADCASTJOINTHRESHOLD}
  sql.broadcastTimeout=300
  sql.broadcastTimeout=${?CROSSDATA_SERVER_CONFIG_SPARK_SQL_BROADCASTJOINTIMEOUT}

  ui.enabled = true
  ui.enabled = ${?CROSSDATA_SERVER_SPARK_UI_ENABLED}

  ui.port = 4040
  ui.port = ${?CROSSDATA_SERVER_CONFIG_SPARK_UI_PORT}

  shuffle.service.enabled = ${?CROSSDATA_SERVER_CONFIG_SPARK_SHUFFLE_SERVICE_ENABLED}
  dynamicAllocation.enabled = ${?CROSSDATA_SERVER_CONFIG_SPARK_DYNAMIC_ALLOCATION_ENABLED}
  dynamicAllocation.executorIdleTimeout = ${?CROSSDATA_SERVER_CONFIG_SPARK_DYNAMIC_ALLOCATION_EXECUTION_IDLE_TIMEOUT}
  dynamicAllocation.initialExecutors = ${?CROSSDATA_SERVER_CONFIG_SPARK_DYNAMIC_ALLOCATION_INITIAL_EXECUTORS}
  dynamicAllocation.maxExecutors = ${?CROSSDATA_SERVER_CONFIG_SPARK_DYNAMIC_ALLOCATION_MAX_EXECUTORS}
  dynamicAllocation.minExecutors = ${?CROSSDATA_SERVER_CONFIG_SPARK_DYNAMIC_ALLOCATION_MIN_EXECUTORS}

  #Calico integration
  mesos.executor.docker.network.name = ${?CROSSDATA_SERVER_SPARK_NETWORK}

  #HDFS Delegation token cache
  hadoop.fs.hdfs.impl.disable.cache = false
  hadoop.fs.hdfs.impl.disable.cache = ${?CROSSDATA_HDFS_DELEGATION_TOKEN_DISABLE_CACHE}

  executor.memory = ${?CROSSDATA_SERVER_CONFIG_SPARK_EXECUTOR_MEMORY}
  executor.cores = ${?CROSSDATA_SERVER_CONFIG_SPARK_EXECUTOR_CORES}
  executor.instances = ${?CROSSDATA_SERVER_CONFIG_SPARK_EXECUTOR_INSTANCES}

  #STANDALONE
  #cores.max = 4

  #MESOS
  mesos.coarse = true
  mesos.coarse = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_COARSE}
  cores.max = ${?CROSSDATA_SERVER_CONFIG_SPARK_CORES_MAX}
  #mesos.uris = ""
  mesos.uris = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_URIS}
  #mesos.executor.docker.image = ""
  mesos.executor.docker.image = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_EXECUTOR_DOCKER_IMAGE}
  #mesos.executor.home = ""
  mesos.executor.home = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_EXECUTOR_HOME}
  #mesos.executor.docker.volumes = ""
  mesos.executor.docker.volumes = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_EXECUTOR_DOCKER_VOLUMES}
  #mesos.role = ""
  mesos.role = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_ROLE}
  mesos.driver.constraints = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_DRIVER_CONSTRAINTS}
  mesos.constraints = ${?CROSSDATA_SERVER_CONFIG_SPARK_MESOS_CONSTRAINTS}
}
